program MyProject;
const Letras : array[1..27] of array[1..8] of byte = (
  (255,0,119,119,119,119,0,255),        //a  1
  (255,0,246,246,246,246,240,255),      //b  2
  (255,0,126,126,126,126,126,255),      //c  3
  (255,240,246,246,246,246,0,255),      //d  4
  (255,0,118,118,118,118,126,255),      //e  5
  (255,0,119,119,119,119,127,255),      //f  6
  (255,0,126,118,118,118,112,255),      //g  7
  (255,0,247,247,247,247,0,255),        //h  8
  (255,126,126,0,126,126,126,255),      //i  9
  (255,113,126,126,0,127,127,255),      //j  10
  (255,0,247,247,235,221,190,255),      //k  11
  (255,0,254,254,254,254,254,255),      //l  12
  (255,1,191,223,223,191,1,255),        //m  13
  (255,129,223,239,247,251,1,255),      //n  14
  (255,129,126,126,126,126,129,255),    //o  15
  (255,0,119,119,119,119,7,255),        //p  16
  (255,255,131,125,121,129,254,255),    //q  17
  (255,128,123,123,123,181,206,255),    //r  18
  (255,158,110,118,118,118,122,253),    //s  19
  (255,127,127,0,0,127,127,255),        //t  20
  (255,1,254,254,254,254,1,255),        //u  21
  (255,3,253,254,254,253,3,255),        //v  22
  (255,0,253,251,251,253,0,255),        //w  23
  (255,60,219,231,231,219,60,255),      //x  24
  (255,63,223,224,224,223,63,255),      //y  25
  (255,60,122,118,110,94,60,255),       //z  26
  (255,255,255,255,255,255,255,255)    //espacio  27
  );
{ Declarations section }


Procedure Entradas_Salidas();
BEGIN
   TRISB:=FALSE;
   PORTB:=0;
END;





procedure Shift_Register(dato1, dato2: Byte);
var
  i: Byte;
begin
  PortB.0 := 0;
  PortB.2 := 0;
  PortB.3 := 1;

  for i := 7 downto 0 do
  begin
    // Desplaza el bit correcto a la posición correcta y envía el dato al primer HC595
    PortB.1 := (dato1 shr i) and 1;

    // Ciclo de reloj para que el HC595 pueda registrar el bit
    PortB.0 := 1;
    Delay_us(1);
    PortB.0 := 0;
    Delay_us(1);
  end;

  for i := 7 downto 0 do
  begin
    // Desplaza el bit correcto a la posición correcta y envía el dato al segundo HC595
    PortB.1 := (dato2 shr i) and 1;

    // Ciclo de reloj para que el HC595 pueda registrar el bit
    PortB.0 := 1;
    Delay_us(1);
    PortB.0 := 0;
    Delay_us(1);
  end;

  // Ciclo de reloj para que los registros puedan transferir los datos a las salidas
  PortB.2 := 1;
  Delay_us(1);

  end;

{
procedure scroll();
const columnas : array[1..8] of byte = (1,2,4,8,16,32,64,128);
var
  i, j,retardo_matriz: byte;
begin
  for i := 1 to 208 do // para 56 columnas
  begin
      for retardo_matriz:=1 to 15 do
      begin
          for j := 1 to 8 do
          begin
      Shift_Register( Letras[i+j],columnas[j]); // Envía ceros al primer registro y el valor de cuadrado al segundo registro
       delay_ms(1); // Pausa para permitir que se perciba el desplazamiento
          end;
      end;
  end;
end;
}

function scroll_mensaje(var mensaje: string): word;
const
  columnas: array[1..8] of byte = (1, 2, 4, 8, 16, 32, 64, 128);
var
  vueltas_vector, i, j, k, l: byte;
  Ascii_decimal: integer;
begin
  vueltas_vector := Length(mensaje);


  for i := 1 to vueltas_vector do
  begin

      for k := 0 to Length(mensaje)-1 do
      begin
        Ascii_decimal := Ord(mensaje[k])-64;

          for j:=1 to 50 do
          begin
          for l := 1 to 8 do
          begin
            Shift_Register(Letras[Ascii_decimal][l] , columnas[l]);
            delay_ms(1);
          end;
          end;

    end;
  end;

  scroll_mensaje := 1; // Valor de retorno arbitrario
end;








function scroll_mensaje2(var mensaje: string): word;
const
  columnas: array[1..8] of byte = (1, 2, 4, 8, 16, 32, 64, 128);
var
  vueltas_vector, i, j, k, l: byte;
  Ascii_decimal: integer;
  buffer: array[0..1] of byte; // Variable buffer para almacenar la letra actual y la siguiente
  desplazamiento: byte; // Variable para realizar el desplazamiento
begin
  vueltas_vector := Length(mensaje);

  // Inicializamos el buffer con el primer caracter del mensaje y el siguiente
  buffer[0] := Ord(mensaje[1])-64;
  buffer[1] := Ord(mensaje[2])-64;
  desplazamiento := 0; // Inicializamos el desplazamiento a 0

  for i := 1 to vueltas_vector do
  begin
    for k := 1 to Length(mensaje)-1 do // Cambiado el límite superior del bucle para que no se salga del array
    begin
      Ascii_decimal := Ord(mensaje[k])-64;
      for j:=1 to 2 do
      begin
        for l := 1 to 8 do
        begin
          // Enviamos al Shift_Register el elemento correspondiente del buffer
          Shift_Register(Letras[buffer[0]][(l div 2)+j] , columnas[l]);
          delay_ms(5);
        end;

        // Desplazamos el buffer a la izquierda
        buffer[0] := buffer[1];
        if k < Length(mensaje)-1 then // Si no es el último caracter, actualizamos el siguiente elemento del buffer
        begin
          buffer[1] := Ord(mensaje[k+1])-64;
        end
        else
        begin
          buffer[1] := 27; // Si es el último caracter, ponemos un espacio en blanco en el buffer
        end;

        // Realizamos el desplazamiento de columnas
        desplazamiento := desplazamiento + 1;
        if desplazamiento >= 8 then // Si ya se ha desplazado 8 columnas, reiniciamos el desplazamiento y enviamos una columna en blanco
        begin
          Shift_Register(0, columnas[8]);
          desplazamiento := 0;
          delay_ms(1);
        end;
      end;
    end;
  end;

  scroll_mensaje2 := 1; // Valor de retorno arbitrario
end;










 var mensaje : string[20];
begin
mensaje:='STEPHANY';


    repeat
   Entradas_Salidas();
   scroll_mensaje2(mensaje);

   until false;
   end.